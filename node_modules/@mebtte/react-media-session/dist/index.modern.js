import React, { useEffect } from 'react';

var HAS_MEDIA_SESSION = window && window.navigator && 'mediaSession' in window.navigator;

var _navigator = navigator,
    mediaSession = _navigator.mediaSession;

var MediaSession = function MediaSession(props) {
  var _props$title = props.title,
      title = _props$title === void 0 ? '' : _props$title,
      _props$artist = props.artist,
      artist = _props$artist === void 0 ? '' : _props$artist,
      _props$album = props.album,
      album = _props$album === void 0 ? '' : _props$album,
      _props$artwork = props.artwork,
      artwork = _props$artwork === void 0 ? [] : _props$artwork,
      onPlay = props.onPlay,
      onPause = props.onPause,
      onSeekBackward = props.onSeekBackward,
      onSeekForward = props.onSeekForward,
      onPreviousTrack = props.onPreviousTrack,
      onNextTrack = props.onNextTrack,
      children = props.children;
  useEffect(function () {
    mediaSession.metadata = new MediaMetadata({
      title: title,
      artist: artist,
      album: album,
      artwork: artwork
    });
    return function () {
      mediaSession.metadata = null;
    };
  }, [title, artist, album, artwork]);
  useEffect(function () {
    mediaSession.setActionHandler('play', onPlay);
    return function () {
      mediaSession.setActionHandler('play', null);
    };
  }, [onPlay]);
  useEffect(function () {
    mediaSession.setActionHandler('pause', onPause);
    return function () {
      mediaSession.setActionHandler('pause', null);
    };
  }, [onPause]);
  useEffect(function () {
    mediaSession.setActionHandler('seekbackward', onSeekBackward);
    return function () {
      mediaSession.setActionHandler('seekbackward', null);
    };
  }, [onSeekBackward]);
  useEffect(function () {
    mediaSession.setActionHandler('seekforward', onSeekForward);
    return function () {
      mediaSession.setActionHandler('seekforward', null);
    };
  }, [onSeekForward]);
  useEffect(function () {
    mediaSession.setActionHandler('previoustrack', onPreviousTrack);
    return function () {
      mediaSession.setActionHandler('previoustrack', null);
    };
  }, [onPreviousTrack]);
  useEffect(function () {
    mediaSession.setActionHandler('nexttrack', onNextTrack);
    return function () {
      mediaSession.setActionHandler('nexttrack', null);
    };
  }, [onNextTrack]);
  return children || null;
};

var Wrapper = function Wrapper(props) {
  if (!HAS_MEDIA_SESSION) {
    return props.children || null;
  }

  return React.createElement(MediaSession, Object.assign({}, props));
};

export default Wrapper;
//# sourceMappingURL=index.modern.js.map
